<html><head><link rel=stylesheet type=text/css href=../styleFile.css><script src=../scriptFile.js></script><body><h3>DependencyAnalysis.h.htm</h3><hr/><div class ="indent"><h4>Dependencies:</h4><br><a href =../ResultFolder/CodePublisher.h.htm>CodePublisher.h</a><br><br><a href =../ResultFolder/DepAnal.h.htm>DepAnal.h</a><br><br><a href =../ResultFolder/DependencyAnalysis.h.htm>DependencyAnalysis.h</a><br><br><a href =../ResultFolder/Executive.cpp.htm>Executive.cpp</a><br><br><a href =../ResultFolder/Executive.h.htm>Executive.h</a><br><br><a href =../ResultFolder/TypeTable.h.htm>TypeTable.h</a><br></div><hr/><pre>#pragma once

///////////////////////////////////////////////////////////////////////////
// DependencyAnalysis.h- To demonstrate code for generating 
// dependency table																		
// Author: Devashree Jadhav		SUID: 244997526		       
///////////////////////////////////////////////////////////////////////////
/*
* Operations:
* -------------------
* This file is created to create the dependency analysis table
* getDepTable()= funtion to get dependency table as an unordered map
* 
*1) createDependencyTable () - Creates a dependency table by using the type table. Saves elements in db.
*2) dependencyPersistance () - Saves Db to XML file and prints the same. 
*
* Required Files:
* ---------------
* AbstrSynTree.h, NoSqlDb.h, TypeTable.h
*
* Maintenance History:
* --------------------
* Ver 1.0 : March 12, 2017
* - first release
*/


#include &ltunordered_map&gt
#include &ltiostream&gt
#include &ltstring&gt
#include &ltsstream&gt
#include &ltiomanip&gt
#include &ltutility&gt
#include &ltclocale&gt
#include &ltlocale&gt
#include &ltset&gt

#include"../Parser/ActionsAndRules.h"
#include"../TypeAnalysis/TypeTable.h"
#include"../Tokenizer/Tokenizer.h"
#include"../Persistance/Persistance.h"
#include "../NoSqlDb/NoSqlDb.h"
#include "../CodePublisher/CodePublisher.h"	

#pragma warning (disable : 4101)  // disable warning re unused variable x, below

using namespace NoSQLDB;
using namespace CodeAnalysis;
using namespace Scanner;

using StrData = std::string;


using SPtr = std::shared_ptr&ltASTNode*&gt;
	class Dependence_class
	<a href = javascript:toggle_visibility('0');>{</a><div id=0>
	
	private:
		std::unordered_map&ltstd::string,std::set&ltstd::string&gt&gt depTable;
		std::unordered_map&ltstd::string,std::pair&ltstd::string,std::string&gt&gt tempTypeTable;
		std::set&ltstd::string&gt tempfiles;
		NoSqlDb&ltStrData&gt db2;
		Element&ltStrData&gt element;
		AbstrSynTree& ASTref_;
		TypeTable table;
		Publish codepub;

	public:

		Dependence_class();
		std::unordered_map&ltstd::string, std::set&ltstd::string&gt&gt& getDepTable()
		<a href = javascript:toggle_visibility('1');>{</a><div id=1>
			return depTable;
		}</div>
		void createDependencyTable(TypeTable& t, std::string fileName);
		
		void  dependencyPersistance(std::string);
		void  callCodePublisher();

	}</div>;

	
	inline  Dependence_class::Dependence_class():ASTref_(Repository::getInstance()-&gtAST())
	<a href = javascript:toggle_visibility('2');>{</a><div id=2>
	}</div>


	inline void Dependence_class::dependencyPersistance(std::string xmlFilename)
	<a href = javascript:toggle_visibility('3');>{</a><div id=3>


		std::ofstream file;

		file.open(xmlFilename);
		XmlNamespace::Persistance p;		 
		file &lt&lt p.toXml(db2);
		
		file.close();

	}</div>
	
	inline void Dependence_class::createDependencyTable(TypeTable& t, std::string fileName)
	<a href = javascript:toggle_visibility('4');>{</a><div id=4>

		tempTypeTable = t.getTable();	
		if (fileName != "") <a href = javascript:toggle_visibility('5');>{</a><div id=5>
			static std::string path = "";
			try <a href = javascript:toggle_visibility('6');>{</a><div id=6>
				std::ifstream in(fileName);
				if (!in.good())
				<a href = javascript:toggle_visibility('7');>{</a><div id=7>
					std::cout &lt&lt "can't open";
				}</div>
				else
				<a href = javascript:toggle_visibility('8');>{</a><div id=8>
					Toker toker;
					toker.returnComments();	toker.attach(&in);

					do
					<a href = javascript:toggle_visibility('9');>{</a><div id=9>
						std::string tok = toker.getTok();

						for (auto tt : tempTypeTable) <a href = javascript:toggle_visibility('10');>{</a><div id=10>
							if (tok == tt.first) <a href = javascript:toggle_visibility('11');>{</a><div id=11>

								tempfiles.insert(tt.second.second);
								//		std::cout &lt&lt"\n"&lt&lt std::setw(55) &lt&lt fileName &lt&lt std::setw(55) &lt&lt tt.second.second &lt&lt "\n";
							}</div>
						}</div>

					}</div> while (in.good());
					element.name = fileName;
					while (!element.Children.empty())
					<a href = javascript:toggle_visibility('12');>{</a><div id=12>
						element.Children.pop_back();
					}</div>
					for (auto iter = tempfiles.begin(); iter != tempfiles.end(); ++iter) <a href = javascript:toggle_visibility('13');>{</a><div id=13>
						element.Children.push_back(*iter);
						//std::cout &lt&lt *iter;
					}</div>
					db2.save(fileName, element);
					depTable.insert(std::make_pair(fileName, tempfiles));
				}</div>

				std::cout &lt&lt std::endl;
				std::cout &lt&lt std::setw(60) &lt&lt std::left &lt&lt fileName &lt&lt "\t---Dependent on----\t ";
				for (auto it = depTable[fileName].begin(); it != depTable[fileName].end(); ++it) <a href = javascript:toggle_visibility('14');>{</a><div id=14>
					std::cout &lt&lt std::endl;
					std::cout &lt&lt std::setw(150) &lt&lt " " &lt&lt *it &lt&lt "\n";
				}</div>
			}</div>
				catch (std::logic_error& ex)
				<a href = javascript:toggle_visibility('15');>{</a><div id=15>
					std::cout &lt&lt "\n  " &lt&lt ex.what();
				}</div>
				std::cout &lt&lt "\n\n";
			}</div>
						
	}</div>

	inline void	Dependence_class::callCodePublisher()
	<a href = javascript:toggle_visibility('16');>{</a><div id=16>
		codepub.makeHtmFiles(depTable);
		codepub.dependencyMapping();
		//codepub.showTable();
	}</div>





	























	


	
	

</pre></body></html>